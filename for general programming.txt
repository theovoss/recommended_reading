http://peternixey.com/post/83510597580/how-to-be-a-great-software-developer
Highlights:

code written for those reading it

importance of architecuter??

why comments are bad and code should be self documenting


http://scottndecker.com/blog/2014/04/25/Never-Solve-the-Same-Problem-from-Scratch-Twice/

Highlights:
why to keep a journal of errors you come across andhow you fixed it the first time

http://bramcohen.livejournal.com/4563.html
Highlights:
how architecture can make a good programmer into a great programmer


http://www.yosefk.com/blog/why-bad-scientific-code-beats-code-following-best-practices.html
This describes common pitfalls - things to avoid doing in any code you write.
I agree with his definition of common pitfalls, but disagree with his generalizations about programmers.
Basically look at the two lists and avoid everything in the first list, and double check that it's actually the best implementation before doing anything in the second list.
