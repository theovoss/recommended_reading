http://peternixey.com/post/83510597580/how-to-be-a-great-software-developer
Highlights:
code written for those reading it
importance of architecture??
why comments are bad and code should be self documenting
- although if speed is a factor, this may not be a great idea, at least in interpretted languages.

http://asyncmanifesto.org/
Highlights:
An alternative view of project management using modern tools.

http://scottndecker.com/blog/2014/04/25/Never-Solve-the-Same-Problem-from-Scratch-Twice/

Highlights:
why to keep a journal of errors you come across andhow you fixed it the first time


http://bramcohen.livejournal.com/4563.html
Highlights:
how architecture can make a good programmer into a great programmer


http://www.yosefk.com/blog/why-bad-scientific-code-beats-code-following-best-practices.html
This describes common pitfalls - things to avoid doing in any code you write.
I agree with his definition of common pitfalls, but disagree with his generalizations about programmers.
Basically look at the two lists and avoid everything in the first list, and double check that it's actually the best implementation before doing anything in the second list.


http://javarevisited.blogspot.sg/2014/05/10-articles-every-programmer-must-read.html
Read through these and add the good ones.


http://sourcemaking.com/design_patterns
design patterns. I should look through some of theses.

http://blog.hut8labs.com/coding-fast-and-slow.html?reddit
Agile programming explained from 'first' principles. aka: why long-term estimates fail and why short term estimates and quick sprints work.


https://www.youtube.com/watch?v=JjDsP5n2kSM
from an independant game developer (Jonathan Blow) who keeps things stupid simple.

http://blog.codeunion.io/2014/09/03/teaching-novices-how-to-debug-code/
How to teach debugging to beginners.
